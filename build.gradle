/**
 * @author bush & perry.
 * @description Original by bush & fully remade by perry. This is the best anarchy Gradle sad that retarded 13-14 yr OyVey skidders can't come close to comparing -perry.
 */
//file:noinspection GroovyAssignabilityCheck I don't like warnings!!!! fuck you nigga!!!
//file:noinspection GroovyUnusedAssignment I don't like warnings!!!! fuck you nigga!!!
buildscript {
    repositories {
        // The mavenCentral() alias means that dependencies are fetched from the central Maven 2 repository (https://repo1.maven.org/maven2).
        mavenCentral()
        // The url to get the spongepowered dependencies from.
        maven { url 'https://repo.spongepowered.org/maven' }
        // The url to get the forge dependencies from.
        maven { url 'https://files.minecraftforge.net/maven' }
    }
    dependencies {
        // Latest 2 version of ForgeGradle will update to 5.1.26 later. Versions list: https://maven.minecraftforge.net/net/minecraftforge/gradle/ForgeGradle/maven-metadata.xml
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3.4'
        // Upgrade to 0.7-SNAPSHOT when upgrading ForgeGradle to 3.0+ & mixin ver at dependencies has to be 0.8+ for upgrading mixingradle ver. https://github.com/SpongePowered/MixinGradle
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

// Gradle plugin for all Minecraft mod development needs.
apply plugin: 'net.minecraftforge.gradle.forge'
// Gradle plugin. Mixin is a trait/mixin & bytecode weaving framework for Java using ASM.
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds & enables the necessary things for Forge to be setup.

// The jar version number that will be output when building.
version = '2.0.0-beta'
// https://maven.apache.org/guides/mini/guide-naming-conventions.html
group = 'cope.inferno'
// The jar name that will be output when building.
archivesBaseName = 'Inferno'

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    // This ensures that the generated class files will be compatible with JVMs specified by targetCompatibility.
    sourceCompatibility = targetCompatibility = '1.8'
    // Makes it so u don't need to convert unicode to basic latin for it to be able to build/run.
    options.encoding 'UTF-8'
}

minecraft {
    // The version of forge & if u want to update to the patch 1.12.2-14.23.5.2860 for log4j exploit u need to have ForgeGradle 3+ version.
    version = '1.12.2-14.23.5.2847'
    // The directory of where the files that are output when doing runClient will be put.
    runDir = 'run'
    // MCP Mapping version.
    mappings = 'stable_39'
    // An Srg named sources jar is made by default. No point for it aka bloat so it has been disabled.
    makeObfSourceJar = false
    // Tells FML to load our mixin loader in IDE's.
    clientJvmArgs += '-Dfml.coreMods.load=cope.inferno.asm.MixinLoader'
    // Tells mixin to use our mixin config in IDE's.
    clientRunArgs += '--mixin mixins.inferno.json'
}

mixin {
    // The obfuscation environment to use when generating refMaps. This is the obfuscation which will end up in the mappings in the generated refMap.
    defaultObfuscationEnv searge // Types of obf env: searge, notch.
    // Sets the main sourceSets refmap name instead of add sourceSets.main so there is no conflict cause of it adding another value instead of setting the 1 value.
    sourceSets {
        main {
            ext.refMap = 'mixins.inferno.refmap.json'
        }
    }
}

repositories {
    // The mavenCentral() alias means that dependencies are fetched from the central Maven 2 repository (https://repo1.maven.org/maven2).
    mavenCentral()
    // The url to get the spongepowered dependencies from.
    maven { url 'https://repo.spongepowered.org/maven' }
}

configurations {
    // Adds a reference so that we extend/add on to it with depends so we can grab them and compile them into the jar.
    embed
    // Grabs what's extended/added on from/to embed and compiles it into the jar when being built.
    compile.extendsFrom embed
}

dependencies {
    // Upgrading to 0.8+ can possibly break compatibility with other clients like Future/RusherHack.
    embed('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Excludes unneeded stuff.
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

    // i like to have this, as it isnt included with the jar so it doesnt hurt anything
    annotationProcessor("org.spongepowered:mixin:0.8.2:processor") {
        exclude module: 'gson'
    }
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    // Replace stuff in mcmod.info, Nothing else.
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // Replace version.
        expand 'version': project.version
    }
    // Copy everything else except the mcmod.info.
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    // Moves the access transformer into META-INF.
    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    from(configurations.embed.collect {
        it.isDirectory() ? it : zipTree(it)
    }) {
        // Excludes/Removes useless bloat files from the compiled jar.
        exclude 'dummyThing',
                'LICENSE.txt',
                'META-INF/MUMFREY.RSA',
                'META-INF/maven/**',
                'org/**/*.html'
    }
    manifest.attributes(
            // Name for the clients mixins.json.
            'MixinConfigs': 'mixins.inferno.json',
            // access transformers
            'FMLAT': 'inferno_at.cfg',
            // Directory for the org library mixin loader.
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            // Actually not too sure what this is for.
            'TweakOrder': 0,
            // Directory for the mixin loader for the built jar.
            'FMLCorePlugin': 'cope.inferno.asm.MixinLoader',
            // Turn this to false for the client to be able to load in a IDE.
            'ForceLoadAsMod': 'true',
            // main class
            'Main-Class': 'cope.inferno.core.Main'
    )
}